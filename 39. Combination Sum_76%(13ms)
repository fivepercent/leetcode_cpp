class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> combination;
        sort(candidates.begin(), candidates.end());
        combinationSumHelper(candidates, 0, target, combination, res);
        return res;
    }

public:
    void combinationSumHelper(vector<int>& candidates, int index, int target, vector<int>& combination, vector<vector<int>>& res){
        if(target<0)return;
        if(target==0){
            vector<int> result;
            for(int i=0; i<combination.size(); i++){
                result.push_back(combination[i]);
            }
            res.push_back(result);
            return;
        }
        for(int i=index; i<candidates.size(); i++){
            if(candidates[i]>target)break;
            combination.push_back(candidates[i]);
            combinationSumHelper(candidates, i, target-candidates[i], combination, res);
            combination.pop_back();
        }
    }
};
